<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>SchemaCrawler</title>
    <author email="sualeh@hotmail.com">Sualeh Fatehi</author>
  </properties>
  <body>
    <section name="SchemaCrawler">
      <subsection name="SchemaCrawler">
        <p>
          SchemaCrawler is an open-source Java API that makes working with database metadata as easy as working with
          plain old Java
          objects. SchemaCrawler is also a command-line tool to output your database schema and data in a
          readable form.
          The output is designed to be
          <a href="http://en.wikipedia.org/wiki/Diff">diff-ed</a>
          with previous versions of your database schema.
        </p>
      </subsection>
      <subsection name="SchemaCrawler API">
        <p>
          Java programmers need to access database metadata</p>
        <ul>
          <li>in order to dynamically generate SQL statements</li>
          <li>when programmatically determining the capabilities of a given RDBMS</li>
          <li>when finding the names and types of tables and columns in the database</li>
        </ul>
        <p>
          Programmers can obtain database metadata using JDBC, but with the raw JDBC API database metadata is returned
          as
          result sets, not Java objects. Also, programmers are still responsible for managing resources, mapping into
          object structures, and handling exceptions. This makes using the JDBC API very cumbersome when it comes to
          metadata. Furthermore, the JDBC API is not very consistent. For example, to find the type of a table, you
          would look at the
          <code>TABLE_TYPE</code>
          , which has a string value, but for procedures,
          <code>PROCEDURE_TYPE</code>
          is an integer. An
          another example, is the
          <code>getCatalogs()</code>
          call, which returns a result set with exactly one column, in contrast to
          <code>getStringFunctions()</code>
          which returns a string containing the list of function names, separated by commas.
        </p>
        <p>
          SchemaCrawler attempts to solve some of these problems by providing an API that is consistent and usable.
          Database metadata is provided in the form of plain old Java objects (POJOs). Some examples of the consistency
          and usability of the SchemaCrawler API are that:</p>
        <ul>
          <li>
            <code>Table</code>
            is an object that has a collection of
            <code>Column</code>
            objects, without requiring you to make additional calls
          </li>
          <li>
            There is a
            <code>getType()</code>
            method, whether on a
            <code>Column</code>
            object, a
            <code>Table</code>
            object, or a
            <code>Procedure</code>
            object, which helps with consistency, and ease of use
          </li>
          <li>
            Lists are always Java lists -
            <code>java.util.List</code>
          </li>
          <li>You don't worry about database resources or exception handling</li>
          <li>
            You can use standard Java programming idioms - for example, you can access the
            <code>Table</code>
            object from a
            <code>Column</code>
            object using
            <code>getParent()</code>
          </li>
        </ul>
        <p>
          SchemaCrawler is free and open-source API available under the LGPL license. SchemaCrawler is written in Java,
          making it operating system agnostic. Since it leverages JDBC, it is also database independent. It deliberately
          doesn't have any RDBMS-specific code. SchemaCrawler allows you to compare structures between two different
          database servers, or even two different database systems, from different vendors.
        </p>

        <p>The sample code below demonstrates just how easy it is to use SchemaCrawler:</p>
        <source><![CDATA[
final SchemaCrawlerOptions options = new SchemaCrawlerOptions();
final Database database = SchemaCrawlerUtility.getDatabase(connection, options);
for (final Catalog catalog: database.getCatalogs())
{
  for (final Schema schema: catalog.getSchemas())
  {
    System.out.println(schema);
    for (final Table table: schema.getTables())
    {
      System.out.print("o--> " + table);
      for (final Column column: table.getColumns())
      {
        System.out.println("     o--> " + column);
      }
    }
  }
}
    ]]></source>
      </subsection>
      <subsection name="SchemaCrawler Command Line">
        <p>
          SchemaCrawler comes with a set of command line tools that allow database metadata to be output as plain text, CSV, or
          HTML. All formats are designed to be easy to
          <a href="http://en.wikipedia.org/wiki/Diff">diff</a>
          , or find differences with other schemas that may
          have been output in the same format. SchemaCrawler has
          powerful
          <a href="http://en.wikipedia.org/wiki/Grep">grep</a>
          functionality that allows you to
          search for table and column names using regular expressions. Finally,
          SchemaCrawler is capable of creating
          entity-relationship diagrams in
          <a href="http://www.graphviz.org/">Graphviz</a>
          dot format.
        </p>
      </subsection>
    </section>
  </body>
</document>
