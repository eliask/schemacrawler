


System Information
========================================================================



SchemaCrawler Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

product name                              SchemaCrawler                 
product version                           9.3                           


Database Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

database product name                     HSQL Database Engine          
database product version                  2.2.9                         
database user name                        SA                            


JDBC Driver Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

driver name                               HSQL Database Engine Driver   
driver version                            2.2.9                         
driver class name                         org.hsqldb.jdbc.JDBCDriver    
url                                       jdbc:hsqldb:hsql://localhost/schemacrawler
is JDBC compliant                         true                          



Data Types
========================================================================


BIGINT                                                       [data type]
  based on                          BIGINT                      
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable except with where .. like

BINARY                                                       [data type]
  based on                          BINARY                      
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

BIT                                                          [data type]
  based on                          BIT                         
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable except with where .. like

BLOB                                                         [data type]
  based on                          BLOB                        
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  not searchable

BOOLEAN                                                      [data type]
  based on                          BOOLEAN                     
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

CHARACTER                                                    [data type]
  based on                          CHAR                        
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

CLOB                                                         [data type]
  based on                          CLOB                        
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  not searchable

DATE                                                         [data type]
  based on                          DATE                        
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

DECIMAL                                                      [data type]
  based on                          DECIMAL                     
  not user defined
  defined with PRECISION,SCALE
  nullable
  auto-incrementable
  searchable except with where .. like

DOUBLE                                                       [data type]
  based on                          DOUBLE                      
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

FLOAT                                                        [data type]
  based on                          DOUBLE                      
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

INTEGER                                                      [data type]
  based on                          INTEGER                     
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable except with where .. like

NUMERIC                                                      [data type]
  based on                          NUMERIC                     
  not user defined
  defined with PRECISION,SCALE
  nullable
  auto-incrementable
  searchable except with where .. like

NVARCHAR                                                     [data type]
  based on                          VARCHAR                     
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

OTHER                                                        [data type]
  based on                          OTHER                       
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

REAL                                                         [data type]
  based on                          DOUBLE                      
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

SMALLINT                                                     [data type]
  based on                          SMALLINT                    
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable except with where .. like

TIME                                                         [data type]
  based on                          TIME                        
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

TIMESTAMP                                                    [data type]
  based on                          TIMESTAMP                   
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable except with where .. like

TINYINT                                                      [data type]
  based on                          TINYINT                     
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable except with where .. like

VARBINARY                                                    [data type]
  based on                          VARBINARY                   
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

VARCHAR                                                      [data type]
  based on                          VARCHAR                     
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

VARCHAR_IGNORECASE                                           [data type]
  based on                          VARCHAR                     
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

PUBLIC.BOOKS.CHARACTER VARYING                               [data type]
  based on                          VARCHAR                     
  not user defined
  defined with 
  not nullable
  not auto-incrementable
  unknown

PUBLIC.SYSTEM_LOBS.BIGINT ARRAY                              [data type]
  based on                          ARRAY                       
  not user defined
  defined with 
  not nullable
  not auto-incrementable
  unknown



Tables
========================================================================


PUBLIC.BOOKS.AUTHORS                                             [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  FIRSTNAME                         VARCHAR(20) not null        
  LASTNAME                          VARCHAR(20) not null        
  ADDRESS1                          VARCHAR(255)                
  ADDRESS2                          VARCHAR(255)                
  CITY                              VARCHAR(50)                 
  STATE                             VARCHAR(2)                  
  POSTALCODE                        VARCHAR(10)                 
  COUNTRY                           VARCHAR(50)                 

PK_AUTHORS                                                 [primary key]
  ID                                ascending                   

FK_Z_AUTHOR                                [foreign key, with no action]
  ID --> PUBLIC.BOOKS.BOOKAUTHORS.AUTHORID                              

SYS_IDX_PK_AUTHORS_10071                                  [unique index]
  ID                                ascending                   

IDX_B_AUTHORS                                         [non-unique index]
  LASTNAME                          ascending                   
  FIRSTNAME                         ascending                   

IDX_A_AUTHORS                                         [non-unique index]
  CITY                              ascending                   
  STATE                             ascending                   
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

TRG_AUTHORS                             [trigger, after delete, per row]
  UPDATE BOOKS.PUBLISHERS SET PUBLISHER='Jacob'WHERE PUBLISHER='John'

CHECK_UPPERCASE_STATE                                 [check constraint]
BOOKS.AUTHORS.STATE=UPPER(BOOKS.AUTHORS.STATE)

SYS_CT_10068                                          [check constraint]
BOOKS.AUTHORS.ID IS NOT NULL

SYS_CT_10069                                          [check constraint]
BOOKS.AUTHORS.FIRSTNAME IS NOT NULL

SYS_CT_10070                                          [check constraint]
BOOKS.AUTHORS.LASTNAME IS NOT NULL

                                                               [remarks]
Contact details for book authors


PUBLIC.BOOKS.AUTHORSLIST                                          [view]
------------------------------------------------------------------------
  ID                                INTEGER                     
  FIRSTNAME                         VARCHAR(20)                 
  LASTNAME                          VARCHAR(20)                 

                                                            [definition]
SELECT ID,FIRSTNAME,LASTNAME FROM BOOKS.AUTHORS


PUBLIC.BOOKS.BOOKAUTHORS                                         [table]
------------------------------------------------------------------------
  BOOKID                            INTEGER not null            
  AUTHORID                          INTEGER not null            
  "UPDATE"                          CLOB                        

FK_Z_AUTHOR                                [foreign key, with no action]
  PUBLIC.BOOKS.AUTHORS.ID --> AUTHORID                              

FK_Y_BOOK                                  [foreign key, with no action]
  PUBLIC.BOOKS.BOOKS.ID --> BOOKID                              

SYS_IDX_10090                                         [non-unique index]
  AUTHORID                          ascending                   

SYS_IDX_10088                                         [non-unique index]
  BOOKID                            ascending                   

UIDX_BOOKAUTHORS                                          [unique index]
  BOOKID                            ascending                   
  AUTHORID                          ascending                   

SYS_CT_10083                                          [check constraint]
BOOKS.BOOKAUTHORS.BOOKID IS NOT NULL

SYS_CT_10084                                          [check constraint]
BOOKS.BOOKAUTHORS.AUTHORID IS NOT NULL

                                                               [remarks]
Relationship between books and their authors, along with the latest updated information


PUBLIC.BOOKS.BOOKS                                               [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  TITLE                             VARCHAR(255) not null       
  DESCRIPTION                       VARCHAR(255)                
  PUBLISHERID                       INTEGER not null            
  PUBLICATIONDATE                   DATE                        
  PRICE                             DOUBLE(64, 0)               

PK_BOOKS                                                   [primary key]
  ID                                ascending                   

FK_Y_BOOK                                  [foreign key, with no action]
  ID --> PUBLIC.BOOKS.BOOKAUTHORS.BOOKID                              

SYS_IDX_PK_BOOKS_10079                                    [unique index]
  ID                                ascending                   

SYS_CT_10076                                          [check constraint]
BOOKS.BOOKS.ID IS NOT NULL

SYS_CT_10077                                          [check constraint]
BOOKS.BOOKS.TITLE IS NOT NULL

SYS_CT_10078                                          [check constraint]
BOOKS.BOOKS.PUBLISHERID IS NOT NULL

                                                               [remarks]
Details for published books
  ID                                Unique (internal) id for book
  TITLE                             Book title                  
  DESCRIPTION                       Book description            
  PUBLISHERID                       Foreign key to the book publisher
  PUBLICATIONDATE                   Book publication date       
  PRICE                             Current price for the book  


PUBLIC.BOOKS."Global Counts"                                     [table]
------------------------------------------------------------------------
  "Global Count"                    INTEGER                     


PUBLIC.BOOKS.PUBLISHERS                                          [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  PUBLISHER                         VARCHAR(255)                

PK_PUBLISHERS                                              [primary key]
  ID                                ascending                   

SYS_IDX_PK_PUBLISHERS_10066                               [unique index]
  ID                                ascending                   

SYS_CT_10065                                          [check constraint]
BOOKS.PUBLISHERS.ID IS NOT NULL

                                                               [remarks]
List of book publishers
  ID                                Unique (internal) id for book publisher
  PUBLISHER                         Name of book publisher      


PUBLIC.FOR_LINT.EXTRA_PK                                         [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  WRITERID                          BIGINT not null             
  PUBLICATIONID                     INTEGER not null            

PK_EXTRA_PK                                                [primary key]
  ID                                ascending                   

FK_PUBLICATION_JOIN                        [foreign key, with no action]
  PUBLIC.FOR_LINT.PUBLICATIONS.ID --> PUBLICATIONID                              

FK_WRITER_JOIN                             [foreign key, with no action]
  PUBLIC.FOR_LINT.WRITERS.ID --> WRITERID                              

SYS_IDX_PK_EXTRA_PK_10147                                 [unique index]
  ID                                ascending                   

SYS_IDX_10153                                         [non-unique index]
  PUBLICATIONID                     ascending                   

SYS_IDX_10151                                         [non-unique index]
  WRITERID                          ascending                   

SYS_CT_10144                                          [check constraint]
FOR_LINT.EXTRA_PK.ID IS NOT NULL

SYS_CT_10145                                          [check constraint]
FOR_LINT.EXTRA_PK.WRITERID IS NOT NULL

SYS_CT_10146                                          [check constraint]
FOR_LINT.EXTRA_PK.PUBLICATIONID IS NOT NULL


PUBLIC.FOR_LINT."Global Counts"                                  [table]
------------------------------------------------------------------------
  "Global Count"                    INTEGER                     


PUBLIC.FOR_LINT.PUBLICATIONS                                     [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  TITLE                             VARCHAR(255) not null       
  DESCRIPTION                       VARCHAR(255)                
  WRITERID                          BIGINT not null             
  PUBLICATIONDATE                   DATE                        
  PRICE                             DOUBLE(64, 0)               
  "UPDATE"                          CLOB                        
  PRESS_RELEASE                     CLOB                        

PK_PUBLICATIONS                                            [primary key]
  ID                                ascending                   

FK_PUBLICATION_JOIN                        [foreign key, with no action]
  ID --> PUBLIC.FOR_LINT.EXTRA_PK.PUBLICATIONID                              

FK_WRITERS_PUBLICATION                     [foreign key, with no action]
  ID --> PUBLIC.FOR_LINT.WRITERS.PUBLICATION_ID                              

FK_PUBLICATIONS_WRITER                     [foreign key, with no action]
  PUBLIC.FOR_LINT.WRITERS.ID --> WRITERID                              

SYS_IDX_PK_PUBLICATIONS_10136                             [unique index]
  ID                                ascending                   

SYS_IDX_10140                                         [non-unique index]
  WRITERID                          ascending                   

SYS_CT_10133                                          [check constraint]
FOR_LINT.PUBLICATIONS.ID IS NOT NULL

SYS_CT_10134                                          [check constraint]
FOR_LINT.PUBLICATIONS.TITLE IS NOT NULL

SYS_CT_10135                                          [check constraint]
FOR_LINT.PUBLICATIONS.WRITERID IS NOT NULL


PUBLIC.FOR_LINT.WRITERS                                          [table]
------------------------------------------------------------------------
  ID                                BIGINT not null             
  FIRSTNAME                         VARCHAR(20) not null        
  LASTNAME                          VARCHAR(20) not null        
  ADDRESS1                          VARCHAR(255)                
  ADDRESS2                          VARCHAR(255) not null       
  CITY                              VARCHAR(50)                 
  STATE                             VARCHAR(2)                  
  POSTALCODE                        VARCHAR(10)                 
  COUNTRY                           VARCHAR(50)                 
  PHONE1                            VARCHAR(10)                 
  PHONE2                            VARCHAR(15)                 
  EMAIL1                            VARCHAR(10)                 
  EMAIL2                            INTEGER                     
  FAX                               VARCHAR(10)                 
  FAX3                              INTEGER                     
  HOMEEMAIL11                       VARCHAR(10)                 
  HOMEEMAIL12                       VARCHAR(10)                 
  PUBLICATION_ID                    BIGINT not null             

PK_WRITERS                                                 [primary key]
  ID                                ascending                   

FK_WRITERS_PUBLICATION                     [foreign key, with no action]
  PUBLIC.FOR_LINT.PUBLICATIONS.ID --> PUBLICATION_ID                              

FK_WRITER_JOIN                             [foreign key, with no action]
  ID --> PUBLIC.FOR_LINT.EXTRA_PK.WRITERID                              

FK_PUBLICATIONS_WRITER                     [foreign key, with no action]
  ID --> PUBLIC.FOR_LINT.PUBLICATIONS.WRITERID                              

SYS_IDX_PK_WRITERS_10126                                  [unique index]
  ID                                ascending                   

SYS_IDX_10155                                         [non-unique index]
  PUBLICATION_ID                    ascending                   

IDX_A1_WRITERS                                        [non-unique index]
  CITY                              ascending                   
  STATE                             ascending                   

IDX_U_WRITERS                                             [unique index]
  EMAIL1                            ascending                   
  COUNTRY                           ascending                   

IDX_B_WRITERS                                         [non-unique index]
  LASTNAME                          ascending                   
  FIRSTNAME                         ascending                   

IDX_A_WRITERS                                         [non-unique index]
  CITY                              ascending                   
  STATE                             ascending                   
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

CHECK_UPPERCASE_STATE                                 [check constraint]
FOR_LINT.WRITERS.STATE=UPPER(FOR_LINT.WRITERS.STATE)

SYS_CT_10121                                          [check constraint]
FOR_LINT.WRITERS.ID IS NOT NULL

SYS_CT_10122                                          [check constraint]
FOR_LINT.WRITERS.FIRSTNAME IS NOT NULL

SYS_CT_10123                                          [check constraint]
FOR_LINT.WRITERS.LASTNAME IS NOT NULL

SYS_CT_10124                                          [check constraint]
FOR_LINT.WRITERS.ADDRESS2 IS NOT NULL

SYS_CT_10125                                          [check constraint]
FOR_LINT.WRITERS.PUBLICATION_ID IS NOT NULL


PUBLIC."PUBLISHER SALES".REGIONS                                 [table]
------------------------------------------------------------------------
  CITY                              VARCHAR(50) not null        
  STATE                             VARCHAR(2) not null         
  POSTALCODE                        VARCHAR(10) not null        
  COUNTRY                           VARCHAR(50) not null        

PK_CUSTOMERS                                               [primary key]
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

FK_SALES_REGIONS                           [foreign key, with no action]
  POSTALCODE --> PUBLIC."PUBLISHER SALES".SALES.POSTALCODE                              
  COUNTRY --> PUBLIC."PUBLISHER SALES".SALES.COUNTRY                              

SYS_IDX_PK_CUSTOMERS_10109                                [unique index]
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

SYS_CT_10105                                          [check constraint]
"PUBLISHER SALES".REGIONS.CITY IS NOT NULL

SYS_CT_10106                                          [check constraint]
"PUBLISHER SALES".REGIONS.STATE IS NOT NULL

SYS_CT_10107                                          [check constraint]
"PUBLISHER SALES".REGIONS.POSTALCODE IS NOT NULL

SYS_CT_10108                                          [check constraint]
"PUBLISHER SALES".REGIONS.COUNTRY IS NOT NULL


PUBLIC."PUBLISHER SALES".SALES                                   [table]
------------------------------------------------------------------------
  POSTALCODE                        VARCHAR(10) not null        
  COUNTRY                           VARCHAR(50) not null        
  BOOKID                            INTEGER                     
  PERIODENDDATE                     DATE                        
  TOTALAMOUNT                       DOUBLE(64, 0)               

FK_SALES_REGIONS                           [foreign key, with no action]
  PUBLIC."PUBLISHER SALES".REGIONS.POSTALCODE --> POSTALCODE                              
  PUBLIC."PUBLISHER SALES".REGIONS.COUNTRY --> COUNTRY                              

SYS_IDX_10119                                         [non-unique index]
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

SYS_CT_10114                                          [check constraint]
"PUBLISHER SALES".SALES.POSTALCODE IS NOT NULL

SYS_CT_10115                                          [check constraint]
"PUBLISHER SALES".SALES.COUNTRY IS NOT NULL




Routines
========================================================================


PUBLIC.BOOKS.CUSTOMADD               [function, does not return a table]
------------------------------------------------------------------------
  ONE                               INTEGER, in                 
  TWO                               INTEGER, in                 

                                                            [definition]
CREATE FUNCTION BOOKS.CUSTOMADD(IN ONE INTEGER,IN TWO INTEGER) RETURNS INTEGER SPECIFIC CUSTOMADD_10102 LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN ONE+TWO

                                                         [specific name]
CUSTOMADD_10102


PUBLIC.BOOKS.CUSTOMADD               [function, does not return a table]
------------------------------------------------------------------------
  ONE                               INTEGER, in                 

                                                            [definition]
CREATE FUNCTION BOOKS.CUSTOMADD(IN ONE INTEGER) RETURNS INTEGER SPECIFIC CUSTOMADD_10103 LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT RETURN BOOKS.CUSTOMADD(ONE,1)

                                                         [specific name]
CUSTOMADD_10103


PUBLIC.BOOKS.NEW_PUBLISHER                        [procedure, no result]
------------------------------------------------------------------------
  PUBLISHER                         CHARACTER VARYING, out      

                                                            [definition]
CREATE PROCEDURE BOOKS.NEW_PUBLISHER(OUT PUBLISHER VARCHAR(50)) SPECIFIC NEW_PUBLISHER_10100 LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL NEW SAVEPOINT LEVEL SET PUBLISHER = 'New Publisher'

                                                         [specific name]
NEW_PUBLISHER_10100


PUBLIC.BOOKS.NEW_PUBLISHER                        [procedure, no result]
------------------------------------------------------------------------
  NEWPUBLISHER                      CHARACTER VARYING, in       
  PUBLISHER                         CHARACTER VARYING, out      

                                                            [definition]
CREATE PROCEDURE BOOKS.NEW_PUBLISHER(IN NEWPUBLISHER VARCHAR(50),OUT PUBLISHER VARCHAR(50)) SPECIFIC NEW_PUBLISHER_10101 LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL NEW SAVEPOINT LEVEL SET PUBLISHER = NEWPUBLISHER

                                                         [specific name]
NEW_PUBLISHER_10101


PUBLIC.SYSTEM_LOBS.ALLOC_BLOCKS                   [procedure, no result]
------------------------------------------------------------------------
  B_COUNT                           INTEGER, in                 
  B_OFFSET                          INTEGER, in                 
  L_ID                              BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.ALLOC_BLOCKS(IN B_COUNT INTEGER,IN B_OFFSET INTEGER,IN L_ID BIGINT) SPECIFIC ALLOC_BLOCKS_10057 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE LOB_ADDR INT DEFAULT NULL;DECLARE REMAINING_COUNT INT DEFAULT 0;DECLARE BL_ADDR INT DEFAULT NULL;DECLARE TEMP_COUNT INT DEFAULT 0;DECLARE BL_OFFSET INT DEFAULT 0;SET REMAINING_COUNT=B_COUNT;SET BL_OFFSET=B_OFFSET;MAIN_LOOP:LOOP SET BL_ADDR=(SELECT BLOCK_ADDR FROM SYSTEM_LOBS.BLOCKS WHERE BLOCK_COUNT=REMAINING_COUNT AND TX_ID=0 FETCH 1 ROW ONLY);IF BL_ADDR IS NOT NULL THEN CALL CONVERT_BLOCK(BL_ADDR,REMAINING_COUNT,BL_OFFSET,L_ID);IF LOB_ADDR IS NULL THEN SET LOB_ADDR=BL_ADDR;END IF;LEAVE MAIN_LOOP;END IF;SET(BL_ADDR,TEMP_COUNT)=(SELECT BLOCK_ADDR,BLOCK_COUNT FROM SYSTEM_LOBS.BLOCKS WHERE BLOCK_COUNT<REMAINING_COUNT AND TX_ID=0 FETCH 1 ROW ONLY);IF BL_ADDR IS NOT NULL THEN CALL CONVERT_BLOCK(BL_ADDR,TEMP_COUNT,BL_OFFSET,L_ID);IF LOB_ADDR IS NULL THEN SET LOB_ADDR=BL_ADDR;END IF;SET REMAINING_COUNT=REMAINING_COUNT-TEMP_COUNT;SET BL_OFFSET=BL_OFFSET+TEMP_COUNT;SET BL_ADDR=NULL;SET TEMP_COUNT=0;ELSE CALL CREATE_EMPTY_BLOCK(BL_ADDR,REMAINING_COUNT);CALL CONVERT_BLOCK(BL_ADDR,REMAINING_COUNT,BL_OFFSET,L_ID);IF LOB_ADDR IS NULL THEN SET LOB_ADDR=BL_ADDR;END IF;LEAVE MAIN_LOOP;END IF;END LOOP MAIN_LOOP;END

                                                         [specific name]
ALLOC_BLOCKS_10057


PUBLIC.SYSTEM_LOBS.CONVERT_BLOCK                  [procedure, no result]
------------------------------------------------------------------------
  B_ADDR                            INTEGER, in                 
  B_COUNT                           INTEGER, in                 
  B_OFFSET                          INTEGER, in                 
  L_ID                              BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.CONVERT_BLOCK(IN B_ADDR INTEGER,IN B_COUNT INTEGER,IN B_OFFSET INTEGER,IN L_ID BIGINT) SPECIFIC CONVERT_BLOCK_10019 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM SYSTEM_LOBS.BLOCKS WHERE BLOCK_ADDR=B_ADDR;INSERT INTO SYSTEM_LOBS.LOBS VALUES(B_ADDR,B_COUNT,B_OFFSET,L_ID);END

                                                         [specific name]
CONVERT_BLOCK_10019


PUBLIC.SYSTEM_LOBS.CREATE_EMPTY_BLOCK             [procedure, no result]
------------------------------------------------------------------------
  B_ADDR                            INTEGER, in/ out            
  B_COUNT                           INTEGER, in                 

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.CREATE_EMPTY_BLOCK(INOUT B_ADDR INTEGER,IN B_COUNT INTEGER) SPECIFIC CREATE_EMPTY_BLOCK_10049 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TEMP_COUNT INT DEFAULT NULL;DECLARE TEMP_ADDR INT DEFAULT NULL;SET(TEMP_ADDR,TEMP_COUNT)=(SELECT BLOCK_ADDR,BLOCK_COUNT FROM SYSTEM_LOBS.BLOCKS WHERE BLOCK_COUNT>B_COUNT AND TX_ID=0 FETCH 1 ROW ONLY);IF TEMP_ADDR IS NULL THEN SIGNAL SQLSTATE'45000';END IF;UPDATE SYSTEM_LOBS.BLOCKS SET BLOCK_COUNT=B_COUNT WHERE BLOCK_ADDR=TEMP_ADDR;INSERT INTO SYSTEM_LOBS.BLOCKS VALUES(TEMP_ADDR+B_COUNT,TEMP_COUNT-B_COUNT,0);SET B_ADDR=TEMP_ADDR;END

                                                         [specific name]
CREATE_EMPTY_BLOCK_10049


PUBLIC.SYSTEM_LOBS.DELETE_BLOCKS                  [procedure, no result]
------------------------------------------------------------------------
  L_ID                              BIGINT, in                  
  B_OFFSET                          INTEGER, in                 
  B_LIMIT                           INTEGER, in                 
  TX_ID                             BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.DELETE_BLOCKS(IN L_ID BIGINT,IN B_OFFSET INTEGER,IN B_LIMIT INTEGER,IN TX_ID BIGINT) SPECIFIC DELETE_BLOCKS_10046 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SYSTEM_LOBS.BLOCKS(SELECT BLOCK_ADDR,BLOCK_COUNT,TX_ID FROM SYSTEM_LOBS.LOBS WHERE LOB_ID=L_ID AND BLOCK_OFFSET>=B_OFFSET AND BLOCK_OFFSET<B_LIMIT);DELETE FROM SYSTEM_LOBS.LOBS WHERE LOB_ID=L_ID AND BLOCK_OFFSET>=B_OFFSET AND BLOCK_OFFSET<B_LIMIT;END

                                                         [specific name]
DELETE_BLOCKS_10046


PUBLIC.SYSTEM_LOBS.DELETE_LOB                     [procedure, no result]
------------------------------------------------------------------------
  L_ID                              BIGINT, in                  
  TX_ID                             BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.DELETE_LOB(IN L_ID BIGINT,IN TX_ID BIGINT) SPECIFIC DELETE_LOB_10021 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO SYSTEM_LOBS.BLOCKS(SELECT BLOCK_ADDR,BLOCK_COUNT,TX_ID FROM SYSTEM_LOBS.LOBS WHERE LOB_ID=L_ID);DELETE FROM SYSTEM_LOBS.LOBS WHERE LOB_ID=L_ID;DELETE FROM SYSTEM_LOBS.LOB_IDS WHERE LOB_ID=L_ID;END

                                                         [specific name]
DELETE_LOB_10021


PUBLIC.SYSTEM_LOBS.DELETE_UNUSED                  [procedure, no result]
------------------------------------------------------------------------
  L_IDS                             BIGINT ARRAY, in            

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.DELETE_UNUSED(IN L_IDS BIGINT ARRAY) SPECIFIC DELETE_UNUSED_10034 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TABLE LIVE_IDS(TEMP_ID INT);DECLARE TABLE TEMP_IDS(TEMP_ID INT);DECLARE TEMP_COUNT INT DEFAULT 1;WHILE TEMP_COUNT<=CARDINALITY(L_IDS)DO INSERT INTO MODULE.LIVE_IDS VALUES L_IDS[TEMP_COUNT];SET TEMP_COUNT=TEMP_COUNT+1;END WHILE;SET TEMP_COUNT=0;REPEAT INSERT INTO MODULE.TEMP_IDS SELECT LOB_ID FROM SYSTEM_LOBS.LOB_IDS WHERE LOB_USAGE_COUNT<1 AND LOB_ID NOT IN(SELECT TEMP_ID FROM MODULE.LIVE_IDS)LIMIT 1000;INSERT INTO SYSTEM_LOBS.BLOCKS(SELECT BLOCK_ADDR,BLOCK_COUNT,0 FROM SYSTEM_LOBS.LOBS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS));DELETE FROM SYSTEM_LOBS.LOBS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS);DELETE FROM SYSTEM_LOBS.LOB_IDS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS);GET DIAGNOSTICS TEMP_COUNT=ROW_COUNT;DELETE FROM MODULE.TEMP_IDS;UNTIL TEMP_COUNT<1000 END REPEAT;END

                                                         [specific name]
DELETE_UNUSED_10034


PUBLIC.SYSTEM_LOBS.DELETE_UNUSED_LOBS             [procedure, no result]
------------------------------------------------------------------------
  LIMIT_ID                          BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.DELETE_UNUSED_LOBS(IN LIMIT_ID BIGINT) SPECIFIC DELETE_UNUSED_LOBS_10044 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE TABLE TEMP_IDS(TEMP_ID INT);DECLARE TEMP_COUNT INT DEFAULT 0;REPEAT INSERT INTO MODULE.TEMP_IDS SELECT LOB_ID FROM SYSTEM_LOBS.LOB_IDS WHERE LOB_USAGE_COUNT=0 AND LOB_ID<LIMIT_ID LIMIT 1000;INSERT INTO SYSTEM_LOBS.BLOCKS(SELECT BLOCK_ADDR,BLOCK_COUNT,0 FROM SYSTEM_LOBS.LOBS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS));DELETE FROM SYSTEM_LOBS.LOBS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS);DELETE FROM SYSTEM_LOBS.LOB_IDS WHERE LOB_ID IN(SELECT TEMP_ID FROM MODULE.TEMP_IDS);GET DIAGNOSTICS TEMP_COUNT=ROW_COUNT;DELETE FROM MODULE.TEMP_IDS;UNTIL TEMP_COUNT<1000 END REPEAT;END

                                                         [specific name]
DELETE_UNUSED_LOBS_10044


PUBLIC.SYSTEM_LOBS.DIVIDE_BLOCK                   [procedure, no result]
------------------------------------------------------------------------
  B_OFFSET                          INTEGER, in                 
  L_ID                              BIGINT, in                  

                                                            [definition]
CREATE PROCEDURE SYSTEM_LOBS.DIVIDE_BLOCK(IN B_OFFSET INTEGER,IN L_ID BIGINT) SPECIFIC DIVIDE_BLOCK_10052 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE BL_ADDR INT DEFAULT NULL;DECLARE BL_COUNT INT DEFAULT NULL;DECLARE BL_OFFSET INT DEFAULT NULL;SET(BL_ADDR,BL_COUNT,BL_OFFSET)=(SELECT BLOCK_ADDR,BLOCK_COUNT,BLOCK_OFFSET FROM SYSTEM_LOBS.LOBS WHERE LOB_ID=L_ID AND B_OFFSET>BLOCK_OFFSET AND B_OFFSET<BLOCK_OFFSET+BLOCK_COUNT);IF BL_ADDR IS NULL THEN SIGNAL SQLSTATE'45000';END IF;DELETE FROM SYSTEM_LOBS.LOBS WHERE BLOCK_ADDR=BL_ADDR;INSERT INTO SYSTEM_LOBS.LOBS VALUES(BL_ADDR,B_OFFSET-BL_OFFSET,BL_OFFSET,L_ID);INSERT INTO SYSTEM_LOBS.LOBS VALUES(BL_ADDR+B_OFFSET-BL_OFFSET,BL_OFFSET+BL_COUNT-B_OFFSET,B_OFFSET,L_ID);END

                                                         [specific name]
DIVIDE_BLOCK_10052



