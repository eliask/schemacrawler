


System Information
========================================================================



SchemaCrawler Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

product name                          SchemaCrawler
product version                       8.2


Database Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

database product name                 HSQL Database Engine
database product version              1.8.0
database user name                    SA


Database Characteristics
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

all procedures are callable           true
all tables are selectable             true
catalog separator                     
catalog term                          
catalogs                              
data definition causes transaction commit  true
data definition ignored in transactions  false
database major version                1
database minor version                8
default transaction isolation         1
deletes are detected for TYPE_FORWARD_ONLY result sets  false
deletes are detected for TYPE_SCROLL_INSENSITIVE result sets  false
deletes are detected for TYPE_SCROLL_SENSITIVE result sets  false
does max row size include blobs       true
driver major version                  1
driver minor version                  8
extra name characters                 
identifier quote string               "
inserts are detected for TYPE_FORWARD_ONLY result sets  false
inserts are detected for TYPE_SCROLL_INSENSITIVE result sets  false
inserts are detected for TYPE_SCROLL_SENSITIVE result sets  false
is catalog at start                   false
is read only                          false
JDBC major version                    3
JDBC minor version                    0
locators update copy                  false
max binary literal length             0
max catalog name length               0
max char literal length               0
max column name length                0
max columns in group by               0
max columns in index                  0
max columns in order by               0
max columns in select                 0
max columns in table                  0
max connections                       0
max cursor name length                0
max index length                      0
max procedure name length             0
max row size                          0
max schema name length                0
max statement length                  0
max statements                        0
max table name length                 0
max tables in select                  0
max user name length                  0
null plus non null is null            true
nulls are sorted at end               false
nulls are sorted at start             false
nulls are sorted high                 false
nulls are sorted low                  true
numeric functions                     ABS, ACOS, ASIN, ATAN, ATAN2, CEILING, COS, COT, DEGREES, EXP, FLOOR, LOG, LOG10, MOD, PI, POWER, RADIANS, RAND, ROUND, SIGN, SIN, SQRT, TAN, TRUNCATE, BITAND, BITOR, BITXOR, ROUNDMAGIC
others inserts are visible for TYPE_FORWARD_ONLY result sets  false
others inserts are visible for TYPE_SCROLL_INSENSITIVE result sets  false
others inserts are visible for TYPE_SCROLL_SENSITIVE result sets  false
others updates are visible for TYPE_FORWARD_ONLY result sets  false
others updates are visible for TYPE_SCROLL_INSENSITIVE result sets  false
others updates are visible for TYPE_SCROLL_SENSITIVE result sets  false
own deletes are visible for TYPE_FORWARD_ONLY result sets  false
own deletes are visible for TYPE_SCROLL_INSENSITIVE result sets  false
own deletes are visible for TYPE_SCROLL_SENSITIVE result sets  false
own inserts are visible for TYPE_FORWARD_ONLY result sets  false
own inserts are visible for TYPE_SCROLL_INSENSITIVE result sets  false
own inserts are visible for TYPE_SCROLL_SENSITIVE result sets  false
own updates are visible for TYPE_FORWARD_ONLY result sets  false
own updates are visible for TYPE_SCROLL_INSENSITIVE result sets  false
own updates are visible for TYPE_SCROLL_SENSITIVE result sets  false
procedure term                        
result set holdability                1
schema term                           SCHEMA
schemas                               INFORMATION_SCHEMA, PUBLIC, SALES
search string escape                  \
SQL keywords                          BEFORE, BIGINT, BINARY, CACHED, DATETIME, LIMIT, LONGVARBINARY, LONGVARCHAR, OBJECT, OTHER, SAVEPOINT, TEMP, TEXT, TOP, TRIGGER, TINYINT, VARBINARY, VARCHAR_IGNORECASE
SQL state type                        2
stores lower case identifiers         false
stores lower case quoted identifiers  false
stores mixed case identifiers         false
stores mixed case quoted identifiers  false
stores upper case identifiers         true
stores upper case quoted identifiers  false
string functions                      ASCII, BIT_LENGTH, CHAR, CHAR_LENGTH, CHARACTER_LENGTH, CONCAT, DIFFERENCE, HEXTORAW, INSERT, LCASE, LEFT, LENGTH, LOCATE, LTRIM, OCTET_LENGTH, RAWTOHEX, REPEAT, REPLACE, RIGHT, RTRIM, SOUNDEX, SPACE, SUBSTR, SUBSTRING, UCASE, LOWER, UPPER
supports alter table with add column  true
supports alter table with drop column  true
supports ANSI92 entry level SQL       false
supports ANSI92 full SQL              false
supports ANSI92 intermediate SQL      false
supports batch updates                true
supports catalogs in data manipulation  false
supports catalogs in index definitions  false
supports catalogs in privilege definitions  false
supports catalogs in procedure calls  false
supports catalogs in table definitions  false
supports column aliasing              true
supports convert                      true
supports core SQL grammar             true
supports correlated subqueries        true
supports data definition and data manipulation transactions  false
supports data manipulation transactions only  true
supports different table correlation names  true
supports expressions in order by      true
supports extended SQL grammar         false
supports full outer joins             false
supports get generated keys           false
supports group by                     true
supports group by beyond select       true
supports group by unrelated           true
supports integrity enhancement facility  true
supports like escape clause           true
supports limited outer joins          true
supports minimum SQL grammar          false
supports mixed case identifiers       false
supports mixed case quoted identifiers  true
supports multiple open results        false
supports multiple result sets         false
supports multiple transactions        true
supports named parameters             true
supports non nullable columns         true
supports open cursors across commit   false
supports open cursors across rollback  false
supports open statements across commit  true
supports open statements across rollback  true
supports order by unrelated           true
supports outer joins                  true
supports positioned delete            false
supports positioned update            false
supports result set type for TYPE_FORWARD_ONLY result sets  true
supports result set type for TYPE_SCROLL_INSENSITIVE result sets  true
supports result set type for TYPE_SCROLL_SENSITIVE result sets  false
supports savepoints                   true
supports schemas in data manipulation  false
supports schemas in index definitions  true
supports schemas in privilege definitions  true
supports schemas in procedure calls   false
supports schemas in table definitions  true
supports select for update            false
supports statement pooling            false
supports stored procedures            true
supports subqueries in comparisons    true
supports subqueries in exists         true
supports subqueries in ins            true
supports subqueries in quantifieds    true
supports table correlation names      true
supports transactions                 true
supports union                        true
supports union all                    true
system functions                      DATABASE, USER, IDENTITY
table types                           GLOBAL TEMPORARY, SYSTEM TABLE, TABLE, VIEW
time date functions                   CURDATE, CURTIME, DATEDIFF, DAYNAME, DAY, DAYOFMONTH, DAYOFWEEK, DAYOFYEAR, HOUR, MINUTE, MONTH, MONTHNAME, NOW, QUARTER, SECOND, WEEK, YEAR, TO_CHAR
type info                             TINYINT, BIGINT, LONGVARBINARY, VARBINARY, BINARY, LONGVARCHAR, CHAR, NUMERIC, DECIMAL, INTEGER, SMALLINT, FLOAT, REAL, DOUBLE, VARCHAR, VARCHAR_IGNORECASE, BOOLEAN, DATE, TIME, TIMESTAMP, OTHER
uses local file per table             false
uses local files                      false


JDBC Driver Information
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

driver name                           HSQL Database Engine Driver
driver version                        1.8.0
driver class name                     org.hsqldb.jdbcDriver
url                                   jdbc:hsqldb:mem:schemacrawler
is JDBC compliant                     false


JDBC Driver Properties
-=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-

default_schema                                         [driver property]
  
  not required; choices [true, false]
  value                             null                        

get_column_name                                        [driver property]
  
  not required; choices [true, false]
  value                             true                        

ifexists                                               [driver property]
  
  not required; choices [true, false]
  value                             null                        

password                                               [driver property]
  
  required
  value                             null                        

shutdown                                               [driver property]
  
  not required; choices [true, false]
  value                             null                        

user                                                   [driver property]
  
  required
  value                             null                        



Data Types
========================================================================


BIGINT                                                       [data type]
  based on                          BIGINT                      
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable

BINARY                                                       [data type]
  based on                          BINARY                      
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

BOOLEAN                                                      [data type]
  based on                          BOOLEAN                     
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

CHAR                                                         [data type]
  based on                          CHAR                        
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

DATE                                                         [data type]
  based on                          DATE                        
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

DECIMAL                                                      [data type]
  based on                          DECIMAL                     
  not user defined
  defined with PRECISION,SCALE
  nullable
  not auto-incrementable
  searchable

DOUBLE                                                       [data type]
  based on                          DOUBLE                      
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

FLOAT                                                        [data type]
  based on                          FLOAT                       
  not user defined
  defined with PRECISION
  nullable
  not auto-incrementable
  searchable

INTEGER                                                      [data type]
  based on                          INTEGER                     
  not user defined
  defined with no parameters
  nullable
  auto-incrementable
  searchable

LONGVARBINARY                                                [data type]
  based on                          LONGVARBINARY               
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

LONGVARCHAR                                                  [data type]
  based on                          LONGVARCHAR                 
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

NUMERIC                                                      [data type]
  based on                          NUMERIC                     
  not user defined
  defined with PRECISION,SCALE
  nullable
  not auto-incrementable
  searchable

OTHER                                                        [data type]
  based on                          OTHER                       
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  not searchable

REAL                                                         [data type]
  based on                          REAL                        
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

SMALLINT                                                     [data type]
  based on                          SMALLINT                    
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

TIME                                                         [data type]
  based on                          TIME                        
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

TIMESTAMP                                                    [data type]
  based on                          TIMESTAMP                   
  not user defined
  defined with PRECISION
  nullable
  not auto-incrementable
  searchable

TINYINT                                                      [data type]
  based on                          TINYINT                     
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

VARBINARY                                                    [data type]
  based on                          VARBINARY                   
  not user defined
  defined with no parameters
  nullable
  not auto-incrementable
  searchable

VARCHAR                                                      [data type]
  based on                          VARCHAR                     
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable

VARCHAR_IGNORECASE                                           [data type]
  based on                          VARCHAR                     
  not user defined
  defined with LENGTH
  nullable
  not auto-incrementable
  searchable



Tables
========================================================================


PUBLIC.AUTHORS                                                   [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  FIRSTNAME                         VARCHAR(20) not null        
  LASTNAME                          VARCHAR(20) not null        
  ADDRESS1                          VARCHAR(255)                
  ADDRESS2                          VARCHAR(255)                
  CITY                              VARCHAR(50)                 
  STATE                             VARCHAR(2)                  
  POSTALCODE                        VARCHAR(10)                 
  COUNTRY                           VARCHAR(50)                 

SYS_IDX_47                                                 [primary key]
  ID                                ascending                   

FK_Z_AUTHOR                                [foreign key, with no action]
  ID --> PUBLIC.BOOKAUTHORS.AUTHORID                              

IDX_B_AUTHORS                                         [non-unique index]
  LASTNAME                          ascending                   
  FIRSTNAME                         ascending                   

IDX_A_AUTHORS                                         [non-unique index]
  CITY                              ascending                   
  STATE                             ascending                   
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

CHECK_UPPERCASE_STATE                                 [check constraint]
  AUTHORS.STATE=UPPER(AUTHORS.STATE)

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        

TRG_AUTHORS                            [trigger, before delete, per row]
  CREATE TRIGGER TRG_AUTHORS BEFORE DELETE ON AUTHORS FOR EACH ROW CALL "org.hsqldb.sample.TriggerSample"

                                                                  [lint]
  incrementing columns
ADDRESS1, ADDRESS2



PUBLIC.AUTHORSLIST                                                [view]
------------------------------------------------------------------------
  ID                                INTEGER                     
  FIRSTNAME                         VARCHAR(20)                 
  LASTNAME                          VARCHAR(20)                 

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        

                                                            [definition]
  SELECT Id, FirstName, LastName FROM Authors


PUBLIC.BOOKAUTHORS                                               [table]
------------------------------------------------------------------------
  BOOKID                            INTEGER not null            
  AUTHORID                          INTEGER not null            
  UPDATE                            INTEGER                     

FK_Z_AUTHOR                                [foreign key, with no action]
  PUBLIC.AUTHORS.ID --> AUTHORID                                

FK_Y_BOOK                                  [foreign key, with no action]
  PUBLIC.BOOKS.ID --> BOOKID                                    

SYS_IDX_52                                            [non-unique index]
  AUTHORID                          ascending                   

SYS_IDX_50                                            [non-unique index]
  BOOKID                            ascending                   

UIDX_BOOKAUTHORS                                          [unique index]
  BOOKID                            ascending                   
  AUTHORID                          ascending                   

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        


PUBLIC.BOOKS                                                     [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  TITLE                             VARCHAR(255) not null       
  DESCRIPTION                       VARCHAR(255)                
  PUBLISHERID                       INTEGER not null            
  PUBLICATIONDATE                   DATE                        
  PRICE                             FLOAT(17, 0)                

SYS_IDX_48                                                 [primary key]
  ID                                ascending                   

FK_Y_BOOK                                  [foreign key, with no action]
  ID --> PUBLIC.BOOKAUTHORS.BOOKID                              

                                                      [weak association]
  PUBLIC.PUBLISHERS.ID --> PUBLISHERID                              

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        


PUBLIC.GLOBALCOUNT                                               [table]
------------------------------------------------------------------------
  Global Count                      INTEGER                     

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        

                                                                  [lint]
  no indices
  single column


PUBLIC.PUBLISHERS                                                [table]
------------------------------------------------------------------------
  ID                                INTEGER not null            
  PUBLISHER                         VARCHAR(255)                

SYS_IDX_46                                                 [primary key]
  ID                                ascending                   

                                                      [weak association]
  ID --> PUBLIC.BOOKS.PUBLISHERID                               

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        


SALES.REGIONS                                                    [table]
------------------------------------------------------------------------
  CITY                              VARCHAR(50) not null        
  STATE                             VARCHAR(2) not null         
  POSTALCODE                        VARCHAR(10) not null        
  COUNTRY                           VARCHAR(50) not null        

SYS_IDX_58                                                 [primary key]
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

FK_SALES_REGIONS                           [foreign key, with no action]
  POSTALCODE --> SALES.SALES.POSTALCODE                              
  COUNTRY --> SALES.SALES.COUNTRY                               

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        


SALES.SALES                                                      [table]
------------------------------------------------------------------------
  POSTALCODE                        VARCHAR(10) not null        
  COUNTRY                           VARCHAR(50) not null        
  BOOKID                            INTEGER                     
  PERIODENDDATE                     DATE                        
  TOTALAMOUNT                       FLOAT(17, 0)                

FK_SALES_REGIONS                           [foreign key, with no action]
  SALES.REGIONS.POSTALCODE --> POSTALCODE                              
  SALES.REGIONS.COUNTRY --> COUNTRY                              

                                                      [weak association]
  PUBLIC.BOOKS.ID --> BOOKID                                    

SYS_IDX_60                                            [non-unique index]
  POSTALCODE                        ascending                   
  COUNTRY                           ascending                   

DELETE                                                       [privilege]
  DBA --> SA (grantable)                                        

INSERT                                                       [privilege]
  DBA --> SA (grantable)                                        

SELECT                                                       [privilege]
  DBA --> SA (grantable)                                        

UPDATE                                                       [privilege]
  DBA --> SA (grantable)                                        




Procedures
========================================================================


PUBLIC.ABS                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.abs(double)

                                                               [remarks]
  Returns the absolute value of the given <code>double</code> value.


PUBLIC.ACOS                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.acos(double)

                                                               [remarks]
  Returns the arc cosine of an angle, in the range of 0.0 through <i>pi</i>. Special case: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.ASCII                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.ascii(java.lang.String)

                                                               [remarks]
  Returns the Unicode code value of the leftmost character of <code>s</code> as an <code>int</code>. This is the same as the ASCII value if the string contains only ASCII characters.


PUBLIC.ASIN                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.asin(double)

                                                               [remarks]
  Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.ATAN                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.atan(double)

                                                               [remarks]
  Returns the arc tangent of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.ATAN2                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.atan2(double,double)

                                                               [remarks]
  Converts rectangular coordinates (<code>x</code>,&nbsp;<code>y</code>) to polar (r,&nbsp;<i>theta</i>). This method computes the phase <i>theta</i> by computing an arc tangent of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special cases: <ul><li>If either argument is NaN, then the result is NaN. <li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. <li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. <li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <i>pi</i>. <li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to -<i>pi</i>. <li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the <code>double</code> value closest to <i>pi</i>/2. <li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the <code>double</code> value closest to -<i>pi</i>/2. <li>If both arguments are positive infinity, then the result is the <code>double</code> value closest to <i>pi</i>/4. <li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the <code>double</code> value closest to 3*<i>pi</i>/4. <li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the <code>double</code> value closest to -<i>pi</i>/4. <li>If both arguments are negative infinity, then the result is the <code>double</code> value closest to -3*<i>pi</i>/4.</ul> <p> A result must be within 2 ulps of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.BIT_LENGTH                            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitLength(java.lang.String)

                                                               [remarks]
  Returns the number of bits in the given <code>String</code>. This includes trailing blanks.


PUBLIC.BITAND                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitand(int,int)

                                                               [remarks]
  Returns the bit-wise logical <em>and</em> of the given integer values.


PUBLIC.BITOR                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitor(int,int)

                                                               [remarks]
  Returns the bit-wise logical <em>xor</em> of the given integer values.


PUBLIC.BITXOR                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitxor(int,int)


PUBLIC.CEILING                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.ceil(double)

                                                               [remarks]
  Returns the smallest (closest to negative infinity) <code>double</code> value that is not less than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. <li>If the argument value is less than zero but greater than -1.0, then the result is negative zero.</ul> Note that the value of <code>Math.ceil(x)</code> is exactly the value of <code>-Math.floor(-x)</code>.


PUBLIC.CHAR                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.character(int)

                                                               [remarks]
  Returns the character string corresponding to the given ASCII (or Unicode) value. <b>Note:</b> <p> In some SQL CLI implementations, a <CODE>null</CODE> is returned if the range is outside 0..255. In HSQLDB, the corresponding Unicode character is returned unchecked.


PUBLIC.CHAR_LENGTH                           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.length(java.lang.String)

                                                               [remarks]
  Returns the number of characters in the given <code>String</code>. This includes trailing blanks.


PUBLIC.CHARACTER_LENGTH                      [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.length(java.lang.String)

                                                               [remarks]
  Returns the number of characters in the given <code>String</code>. This includes trailing blanks.


PUBLIC.CONCAT                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.concat(java.lang.String,java.lang.String)

                                                               [remarks]
  Returns a <CODE>String</CODE> object that is the result of an <em>SQL-style</em> concatenation of the given <CODE>String</CODE> objects. <p> <b>Note:</b> by <em>SQL-style</em>, it is meant: <UL> <LI> if both <CODE>String</CODE> objects are <CODE>null</CODE>, return <CODE>null</CODE> <LI> if only one string is <CODE>null</CODE>, return the other <LI> if both <CODE>String</CODE> objects are non-null, return as a <CODE>String</CODE> object the character sequence obtained by listing, in left to right order, the characters of the first string followed by the characters of the second </UL>


PUBLIC.COS                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.cos(double)

                                                               [remarks]
  Returns the trigonometric cosine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.COT                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.cot(double)

                                                               [remarks]
  Returns the cotangent of the given <code>double</code> value expressed in radians.


PUBLIC.CURDATE                               [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DATE, result                

                                                            [definition]
  org.hsqldb.Library.curdate(java.sql.Connection)


PUBLIC.CURTIME                               [procedure, returns result]
------------------------------------------------------------------------
  @p0                               TIME, result                

                                                            [definition]
  org.hsqldb.Library.curtime(java.sql.Connection)


PUBLIC.DATABASE                              [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.database(java.sql.Connection)

                                                               [remarks]
  Returns the name of the database corresponding to this connection.


PUBLIC.DATEDIFF                              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               TIMESTAMP, in               
  @p3                               TIMESTAMP, in               
  @p0                               BIGINT, result              

                                                            [definition]
  org.hsqldb.Library.datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)

                                                               [remarks]
  Returns the number of date and time boundaries crossed between two specified datetime values.


PUBLIC.DAY                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofmonth(java.sql.Date)

                                                               [remarks]
  Returns the day of the month from the given date value, as an integer value in the range of 1-31.


PUBLIC.DAYNAME                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.dayname(java.sql.Date)

                                                               [remarks]
  Returns a character string containing the name of the day (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday ) for the day portion of the given <code>java.sql.Date</code>.


PUBLIC.DAYOFMONTH                            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofmonth(java.sql.Date)

                                                               [remarks]
  Returns the day of the month from the given date value, as an integer value in the range of 1-31.


PUBLIC.DAYOFWEEK                             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofweek(java.sql.Date)

                                                               [remarks]
  Returns the day of the week from the given date value, as an integer value in the range 1-7, where 1 represents Sunday.


PUBLIC.DAYOFYEAR                             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofyear(java.sql.Date)

                                                               [remarks]
  Returns the day of the year from the given date value, as an integer value in the range 1-366.


PUBLIC.DEGREES                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.toDegrees(double)

                                                               [remarks]
  Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly equal <code>0.0</code>.


PUBLIC.DIFFERENCE                            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.difference(java.lang.String,java.lang.String)

                                                               [remarks]
  Returns a count of the characters that do not match when comparing the 4 digit numeric SOUNDEX character sequences for the given <code>String</code> objects. If either <code>String</code> object is <code>null</code>, zero is returned.


PUBLIC.EXP                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.exp(double)

                                                               [remarks]
  Returns Euler's number <i>e</i> raised to the power of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN, the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative infinity, then the result is positive zero.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.FLOOR                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.floor(double)

                                                               [remarks]
  Returns the largest (closest to positive infinity) <code>double</code> value that is not greater than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.</ul>


PUBLIC.HEXTORAW                              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.hexToRaw(java.lang.String)

                                                               [remarks]
  Converts a <code>String</code> of hexidecimal digit characters to a raw binary value, represented as a <code>String</code>.<p> The given <code>String</code> object must consist of a sequence of 4 digit hexidecimal character substrings.<p> If its length is not evenly divisible by 4, <code>null</code> is returned. If any any of its 4 character subsequences cannot be parsed as a 4 digit, base 16 value, then a NumberFormatException is thrown. This conversion has the effect of reducing the character count 4:1.


PUBLIC.HOUR                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.hour(java.sql.Time)

                                                               [remarks]
  Returns the hour from the given time value, as an integer value in the range of 0-23.


PUBLIC.IDENTITY                              [procedure, returns result]
------------------------------------------------------------------------
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.identity()

                                                               [remarks]
  Retrieves the last auto-generated integer indentity value used by this connection. As of 1.7.1 this is a dummy function. The return value is supplied directly by Function.java


PUBLIC.INSERT                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p3                               INTEGER, in                 
  @p4                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.insert(java.lang.String,int,int,java.lang.String)

                                                               [remarks]
  Returns a character sequence which is the result of writing the first <code>length</code> number of characters from the second given <code>String</code> over the first string. The start position in the first string where the characters are overwritten is given by <code>start</code>.<p> <b>Note:</b> In order of precedence, boundry conditions are handled as follows:<p> <UL> <LI>if either supplied <code>String</code> is null, then the other is returned; the check starts with the first given <code>String</code>. <LI>if <code>start</code> is less than one, <code>s1</code> is returned <LI>if <code>length</code> is less than or equal to zero, <code>s1</code> is returned <LI>if the length of <code>s2</code> is zero, <code>s1</code> is returned <LI>if <code>start</code> is greater than the length of <code>s1</code>, <code>s1</code> is returned <LI>if <code>length</code> is such that, taken together with <code>start</code>, the indicated interval extends beyond the end of <code>s1</code>, then the insertion is performed precisely as if upon a copy of <code>s1</code> extended in length to just include the indicated interval </UL>


PUBLIC.java.lang.Math.abs                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               BIGINT, in                  
  @p0                               BIGINT, result              

                                                            [definition]
  java.lang.Math.abs(double)java.lang.Math.abs(float)java.lang.Math.abs(int)java.lang.Math.abs(long)

                                                               [remarks]
  Returns the absolute value of a <code>long</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. <p> Note that if the argument is equal to the value of <code>Long.MIN_VALUE</code>, the most negative representable <code>long</code> value, the result is that same value, which is negative.


PUBLIC.java.lang.Math.acos                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.acos(double)

                                                               [remarks]
  Returns the arc cosine of an angle, in the range of 0.0 through <i>pi</i>. Special case: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.asin                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.asin(double)

                                                               [remarks]
  Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.atan                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.atan(double)

                                                               [remarks]
  Returns the arc tangent of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.atan2                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.atan2(double,double)

                                                               [remarks]
  Converts rectangular coordinates (<code>x</code>,&nbsp;<code>y</code>) to polar (r,&nbsp;<i>theta</i>). This method computes the phase <i>theta</i> by computing an arc tangent of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special cases: <ul><li>If either argument is NaN, then the result is NaN. <li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. <li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. <li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <i>pi</i>. <li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to -<i>pi</i>. <li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the <code>double</code> value closest to <i>pi</i>/2. <li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the <code>double</code> value closest to -<i>pi</i>/2. <li>If both arguments are positive infinity, then the result is the <code>double</code> value closest to <i>pi</i>/4. <li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the <code>double</code> value closest to 3*<i>pi</i>/4. <li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the <code>double</code> value closest to -<i>pi</i>/4. <li>If both arguments are negative infinity, then the result is the <code>double</code> value closest to -3*<i>pi</i>/4.</ul> <p> A result must be within 2 ulps of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.cbrt                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.cbrt(double)


PUBLIC.java.lang.Math.ceil                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.ceil(double)

                                                               [remarks]
  Returns the smallest (closest to negative infinity) <code>double</code> value that is not less than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. <li>If the argument value is less than zero but greater than -1.0, then the result is negative zero.</ul> Note that the value of <code>Math.ceil(x)</code> is exactly the value of <code>-Math.floor(-x)</code>.


PUBLIC.java.lang.Math.copySign               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p2                               FLOAT(8, 17), in            
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.copySign(double,double)java.lang.Math.copySign(float,float)


PUBLIC.java.lang.Math.cos                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.cos(double)

                                                               [remarks]
  Returns the trigonometric cosine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.cosh                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.cosh(double)


PUBLIC.java.lang.Math.exp                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.exp(double)

                                                               [remarks]
  Returns Euler's number <i>e</i> raised to the power of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN, the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative infinity, then the result is positive zero.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.expm1                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.expm1(double)


PUBLIC.java.lang.Math.floor                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.floor(double)

                                                               [remarks]
  Returns the largest (closest to positive infinity) <code>double</code> value that is not greater than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.</ul>


PUBLIC.java.lang.Math.getExponent            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p0                               INTEGER, result             

                                                            [definition]
  java.lang.Math.getExponent(double)java.lang.Math.getExponent(float)


PUBLIC.java.lang.Math.hypot                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.hypot(double,double)


PUBLIC.java.lang.Math.IEEEremainder          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.IEEEremainder(double,double)

                                                               [remarks]
  Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>, where <i>n</i> is the mathematical integer closest to the exact mathematical value of the quotient <code>f1/f2</code>, and if two mathematical integers are equally close to <code>f1/f2</code>, then <i>n</i> is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: <ul><li>If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. <li>If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.</ul>


PUBLIC.java.lang.Math.log                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.log(double)

                                                               [remarks]
  Returns the natural logarithm (base <i>e</i>) of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is negative infinity.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.log10                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.log10(double)


PUBLIC.java.lang.Math.log1p                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.log1p(double)


PUBLIC.java.lang.Math.max                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               BIGINT, in                  
  @p2                               BIGINT, in                  
  @p0                               BIGINT, result              

                                                            [definition]
  java.lang.Math.max(double,double)java.lang.Math.max(float,float)java.lang.Math.max(int,int)java.lang.Math.max(long,long)

                                                               [remarks]
  Returns the greater of two <code>long</code> values. That is, the result is the argument closer to the value of <code>Long.MAX_VALUE</code>. If the arguments have the same value, the result is that same value.


PUBLIC.java.lang.Math.min                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               BIGINT, in                  
  @p2                               BIGINT, in                  
  @p0                               BIGINT, result              

                                                            [definition]
  java.lang.Math.min(double,double)java.lang.Math.min(float,float)java.lang.Math.min(int,int)java.lang.Math.min(long,long)

                                                               [remarks]
  Returns the smaller of two <code>long</code> values. That is, the result is the argument closer to the value of <code>Long.MIN_VALUE</code>. If the arguments have the same value, the result is that same value.


PUBLIC.java.lang.Math.nextAfter              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p2                               DOUBLE(8, 17), in           
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.nextAfter(double,double)java.lang.Math.nextAfter(float,double)


PUBLIC.java.lang.Math.nextUp                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.nextUp(double)java.lang.Math.nextUp(float)


PUBLIC.java.lang.Math.pow                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.pow(double,double)

                                                               [remarks]
  Returns of value of the first argument raised to the power of the second argument. Special cases: <ul><li>If the second argument is positive or negative zero, then the result is 1.0. <li>If the second argument is 1.0, then the result is the same as the first argument. <li>If the second argument is NaN, then the result is NaN. <li>If the first argument is NaN and the second argument is nonzero, then the result is NaN. <li>If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. <li>If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. <li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. <li>If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. <li>If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. <li>If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. <li>If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. <li>If the first argument is less than zero and the second argument is a finite even integer, then the result is equal to the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is less than zero and the second argument is a finite odd integer, then the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is finite and less than zero and the second argument is finite and not an integer, then the result is NaN. <li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value.</ul> <p>(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is a fixed point of the method {@link #ceil <tt>ceil</tt>} or, equivalently, a fixed point of the method {@link #floor <tt>floor</tt>}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.) <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.random                 [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.random()

                                                               [remarks]
  Returns a <code>double</code> value with a positive sign, greater than or equal to <code>0.0</code> and less than <code>1.0</code>. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. <p> When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression <blockquote><pre>new java.util.Random</pre></blockquote> This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. <p> This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.


PUBLIC.java.lang.Math.rint                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.rint(double)

                                                               [remarks]
  Returns the <code>double</code> value that is closest in value to the argument and is equal to a mathematical integer. If two <code>double</code> values that are mathematical integers are equally close, the result is the integer value that is even. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.</ul>


PUBLIC.java.lang.Math.round                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p0                               INTEGER, result             

                                                            [definition]
  java.lang.Math.round(double)java.lang.Math.round(float)

                                                               [remarks]
  Returns the closest <code>int</code> to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type <code>int</code>. In other words, the result is equal to the value of the expression: <p><pre>(int)Math.floor(a + 0.5f)</pre> <p> Special cases: <ul><li>If the argument is NaN, the result is 0. <li>If the argument is negative infinity or any value less than or equal to the value of <code>Integer.MIN_VALUE</code>, the result is equal to the value of <code>Integer.MIN_VALUE</code>. <li>If the argument is positive infinity or any value greater than or equal to the value of <code>Integer.MAX_VALUE</code>, the result is equal to the value of <code>Integer.MAX_VALUE</code>.</ul>


PUBLIC.java.lang.Math.scalb                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p2                               INTEGER, in                 
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.scalb(double,int)java.lang.Math.scalb(float,int)


PUBLIC.java.lang.Math.signum                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.signum(double)java.lang.Math.signum(float)


PUBLIC.java.lang.Math.sin                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.sin(double)

                                                               [remarks]
  Returns the trigonometric sine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.sinh                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.sinh(double)


PUBLIC.java.lang.Math.sqrt                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.sqrt(double)

                                                               [remarks]
  Returns the correctly rounded positive square root of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is the same as the argument.</ul> Otherwise, the result is the <code>double</code> value closest to the true mathematical square root of the argument value.


PUBLIC.java.lang.Math.tan                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.tan(double)

                                                               [remarks]
  Returns the trigonometric tangent of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.java.lang.Math.tanh                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.tanh(double)


PUBLIC.java.lang.Math.toDegrees              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.toDegrees(double)

                                                               [remarks]
  Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly equal <code>0.0</code>.


PUBLIC.java.lang.Math.toRadians              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.toRadians(double)

                                                               [remarks]
  Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.


PUBLIC.java.lang.Math.ulp                    [procedure, returns result]
------------------------------------------------------------------------
  @p1                               FLOAT(8, 17), in            
  @p0                               FLOAT(8, 17), result        

                                                            [definition]
  java.lang.Math.ulp(double)java.lang.Math.ulp(float)


PUBLIC.LCASE                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.lcase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all upper case characters converted to lower case. This uses the default Java String conversion.


PUBLIC.LEFT                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.left(java.lang.String,int)

                                                               [remarks]
  Returns the leftmost <code>count</code> characters from the given <code>String</code>. <p> <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI>if <code>s</code> is <code>null</code>, then <code>null</code> is returned <LI>if <code>count</code> is less than 1, then a zero-length <code>String</code> is returned <LI>if <code>count</code> is greater than the length of <code>s</code>, then a copy of <code>s</code> is returned </UL>


PUBLIC.LENGTH                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.length(java.lang.String)

                                                               [remarks]
  Returns the number of characters in the given <code>String</code>. This includes trailing blanks.


PUBLIC.LOCATE                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p3                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.locate(java.lang.String,java.lang.String,java.lang.Integer)

                                                               [remarks]
  Returns the starting position of the first occurrence of the given <code>search</code> <code>String</code> object within the given <code>String</code> object, <code>s</code>. The search for the first occurrence of <code>search</code> begins with the first character position in <code>s</code>, unless the optional argument, <code>start</code>, is specified (non-null). If <code>start</code> is specified, the search begins with the character position indicated by the value of <code>start</code>, where the first character position in <code>s</code> is indicated by the value 1. If <code>search</code> is not found within <code>s</code>, the value 0 is returned.


PUBLIC.LOG                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.log(double)

                                                               [remarks]
  Returns the natural logarithm (base <i>e</i>) of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is negative infinity.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.LOG10                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.log10(double)

                                                               [remarks]
  Returns the base 10 logarithm of the given <code>double</code> value.


PUBLIC.LOWER                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.lcase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all upper case characters converted to lower case. This uses the default Java String conversion.


PUBLIC.LTRIM                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.ltrim(java.lang.String)

                                                               [remarks]
  Returns the characters of the given <code>String</code>, with the leading spaces removed. Characters such as TAB are not removed.


PUBLIC.MINUTE                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.minute(java.sql.Time)

                                                               [remarks]
  Returns the minute from the given time value, as integer value in the range of 0-59.


PUBLIC.MOD                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.mod(int,int)

                                                               [remarks]
  Returns the remainder (modulus) of the first given integer divided by the second. <p>


PUBLIC.MONTH                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.month(java.sql.Date)

                                                               [remarks]
  Returns the month from the given date value, as an integer value in the range of 1-12 or 0-11. <p> If the sql_month database property is set <code>true</code>, then the range is 1-12, else 0-11


PUBLIC.MONTHNAME                             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.monthname(java.sql.Date)

                                                               [remarks]
  Returns a character string containing the name of month (January, February, March, April, May, June, July, August, September, October, November, December) for the month portion of the given date value.


PUBLIC.NOW                                   [procedure, returns result]
------------------------------------------------------------------------
  @p0                               TIMESTAMP, result           

                                                            [definition]
  org.hsqldb.Library.now(java.sql.Connection)


PUBLIC.OCTET_LENGTH                          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.octetLength(java.lang.String)

                                                               [remarks]
  Returns the number of bytes in the given <code>String</code>. This includes trailing blanks.


PUBLIC.org.hsqldb.Library.abs                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.abs(double)

                                                               [remarks]
  Returns the absolute value of the given <code>double</code> value.


PUBLIC.org.hsqldb.Library.ascii              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.ascii(java.lang.String)

                                                               [remarks]
  Returns the Unicode code value of the leftmost character of <code>s</code> as an <code>int</code>. This is the same as the ASCII value if the string contains only ASCII characters.


PUBLIC.org.hsqldb.Library.bitand             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitand(int,int)

                                                               [remarks]
  Returns the bit-wise logical <em>and</em> of the given integer values.


PUBLIC.org.hsqldb.Library.bitLength          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitLength(java.lang.String)

                                                               [remarks]
  Returns the number of bits in the given <code>String</code>. This includes trailing blanks.


PUBLIC.org.hsqldb.Library.bitor              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitor(int,int)

                                                               [remarks]
  Returns the bit-wise logical <em>xor</em> of the given integer values.


PUBLIC.org.hsqldb.Library.bitxor             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.bitxor(int,int)


PUBLIC.org.hsqldb.Library.character          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.character(int)

                                                               [remarks]
  Returns the character string corresponding to the given ASCII (or Unicode) value. <b>Note:</b> <p> In some SQL CLI implementations, a <CODE>null</CODE> is returned if the range is outside 0..255. In HSQLDB, the corresponding Unicode character is returned unchecked.


PUBLIC.org.hsqldb.Library.concat             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.concat(java.lang.String,java.lang.String)

                                                               [remarks]
  Returns a <CODE>String</CODE> object that is the result of an <em>SQL-style</em> concatenation of the given <CODE>String</CODE> objects. <p> <b>Note:</b> by <em>SQL-style</em>, it is meant: <UL> <LI> if both <CODE>String</CODE> objects are <CODE>null</CODE>, return <CODE>null</CODE> <LI> if only one string is <CODE>null</CODE>, return the other <LI> if both <CODE>String</CODE> objects are non-null, return as a <CODE>String</CODE> object the character sequence obtained by listing, in left to right order, the characters of the first string followed by the characters of the second </UL>


PUBLIC.org.hsqldb.Library.cot                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.cot(double)

                                                               [remarks]
  Returns the cotangent of the given <code>double</code> value expressed in radians.


PUBLIC.org.hsqldb.Library.curdate            [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DATE, result                

                                                            [definition]
  org.hsqldb.Library.curdate(java.sql.Connection)


PUBLIC.org.hsqldb.Library.curtime            [procedure, returns result]
------------------------------------------------------------------------
  @p0                               TIME, result                

                                                            [definition]
  org.hsqldb.Library.curtime(java.sql.Connection)


PUBLIC.org.hsqldb.Library.database           [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.database(java.sql.Connection)

                                                               [remarks]
  Returns the name of the database corresponding to this connection.


PUBLIC.org.hsqldb.Library.datediff           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               TIMESTAMP, in               
  @p3                               TIMESTAMP, in               
  @p0                               BIGINT, result              

                                                            [definition]
  org.hsqldb.Library.datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)

                                                               [remarks]
  Returns the number of date and time boundaries crossed between two specified datetime values.


PUBLIC.org.hsqldb.Library.dayname            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.dayname(java.sql.Date)

                                                               [remarks]
  Returns a character string containing the name of the day (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday ) for the day portion of the given <code>java.sql.Date</code>.


PUBLIC.org.hsqldb.Library.dayofmonth         [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofmonth(java.sql.Date)

                                                               [remarks]
  Returns the day of the month from the given date value, as an integer value in the range of 1-31.


PUBLIC.org.hsqldb.Library.dayofweek          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofweek(java.sql.Date)

                                                               [remarks]
  Returns the day of the week from the given date value, as an integer value in the range 1-7, where 1 represents Sunday.


PUBLIC.org.hsqldb.Library.dayofyear          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.dayofyear(java.sql.Date)

                                                               [remarks]
  Returns the day of the year from the given date value, as an integer value in the range 1-366.


PUBLIC.org.hsqldb.Library.difference         [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.difference(java.lang.String,java.lang.String)

                                                               [remarks]
  Returns a count of the characters that do not match when comparing the 4 digit numeric SOUNDEX character sequences for the given <code>String</code> objects. If either <code>String</code> object is <code>null</code>, zero is returned.


PUBLIC.org.hsqldb.Library.getAutoCommit      [procedure, returns result]
------------------------------------------------------------------------
  @p0                               BOOLEAN, result             

                                                            [definition]
  org.hsqldb.Library.getAutoCommit(java.sql.Connection)

                                                               [remarks]
  Retrieves the autocommit status of this connection. <p>


PUBLIC.org.hsqldb.Library.getDatabaseFullProductVersion  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.getDatabaseFullProductVersion()


PUBLIC.org.hsqldb.Library.getDatabaseMajorVersion  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.getDatabaseMajorVersion()

                                                               [remarks]
  Retrieves the major version number of this database. <p>


PUBLIC.org.hsqldb.Library.getDatabaseMinorVersion  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.getDatabaseMinorVersion()

                                                               [remarks]
  Retrieves the major version number of this database. <p>


PUBLIC.org.hsqldb.Library.getDatabaseProductName  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.getDatabaseProductName()

                                                               [remarks]
  Retrieves the name of this database product. <p>


PUBLIC.org.hsqldb.Library.getDatabaseProductVersion  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.getDatabaseProductVersion()

                                                               [remarks]
  Retrieves the version number of this database product. <p>


PUBLIC.org.hsqldb.Library.hexToRaw           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.hexToRaw(java.lang.String)

                                                               [remarks]
  Converts a <code>String</code> of hexidecimal digit characters to a raw binary value, represented as a <code>String</code>.<p> The given <code>String</code> object must consist of a sequence of 4 digit hexidecimal character substrings.<p> If its length is not evenly divisible by 4, <code>null</code> is returned. If any any of its 4 character subsequences cannot be parsed as a 4 digit, base 16 value, then a NumberFormatException is thrown. This conversion has the effect of reducing the character count 4:1.


PUBLIC.org.hsqldb.Library.hour               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.hour(java.sql.Time)

                                                               [remarks]
  Returns the hour from the given time value, as an integer value in the range of 0-23.


PUBLIC.org.hsqldb.Library.identity           [procedure, returns result]
------------------------------------------------------------------------
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.identity()

                                                               [remarks]
  Retrieves the last auto-generated integer indentity value used by this connection. As of 1.7.1 this is a dummy function. The return value is supplied directly by Function.java


PUBLIC.org.hsqldb.Library.insert             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p3                               INTEGER, in                 
  @p4                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.insert(java.lang.String,int,int,java.lang.String)

                                                               [remarks]
  Returns a character sequence which is the result of writing the first <code>length</code> number of characters from the second given <code>String</code> over the first string. The start position in the first string where the characters are overwritten is given by <code>start</code>.<p> <b>Note:</b> In order of precedence, boundry conditions are handled as follows:<p> <UL> <LI>if either supplied <code>String</code> is null, then the other is returned; the check starts with the first given <code>String</code>. <LI>if <code>start</code> is less than one, <code>s1</code> is returned <LI>if <code>length</code> is less than or equal to zero, <code>s1</code> is returned <LI>if the length of <code>s2</code> is zero, <code>s1</code> is returned <LI>if <code>start</code> is greater than the length of <code>s1</code>, <code>s1</code> is returned <LI>if <code>length</code> is such that, taken together with <code>start</code>, the indicated interval extends beyond the end of <code>s1</code>, then the insertion is performed precisely as if upon a copy of <code>s1</code> extended in length to just include the indicated interval </UL>


PUBLIC.org.hsqldb.Library.isReadOnlyConnection  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               BOOLEAN, result             

                                                            [definition]
  org.hsqldb.Library.isReadOnlyConnection(java.sql.Connection)

                                                               [remarks]
  Retrieves whether this connection is in read-only mode. <p>


PUBLIC.org.hsqldb.Library.isReadOnlyDatabase  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               BOOLEAN, result             

                                                            [definition]
  org.hsqldb.Library.isReadOnlyDatabase(java.sql.Connection)

                                                               [remarks]
  Retrieves whether this database is in read-only mode. <p>


PUBLIC.org.hsqldb.Library.isReadOnlyDatabaseFiles  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               BOOLEAN, result             

                                                            [definition]
  org.hsqldb.Library.isReadOnlyDatabaseFiles(java.sql.Connection)

                                                               [remarks]
  Retrieves whether the files of this database are in read-only mode.


PUBLIC.org.hsqldb.Library.lcase              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.lcase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all upper case characters converted to lower case. This uses the default Java String conversion.


PUBLIC.org.hsqldb.Library.left               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.left(java.lang.String,int)

                                                               [remarks]
  Returns the leftmost <code>count</code> characters from the given <code>String</code>. <p> <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI>if <code>s</code> is <code>null</code>, then <code>null</code> is returned <LI>if <code>count</code> is less than 1, then a zero-length <code>String</code> is returned <LI>if <code>count</code> is greater than the length of <code>s</code>, then a copy of <code>s</code> is returned </UL>


PUBLIC.org.hsqldb.Library.length             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.length(java.lang.String)

                                                               [remarks]
  Returns the number of characters in the given <code>String</code>. This includes trailing blanks.


PUBLIC.org.hsqldb.Library.locate             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p3                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.locate(java.lang.String,java.lang.String,java.lang.Integer)

                                                               [remarks]
  Returns the starting position of the first occurrence of the given <code>search</code> <code>String</code> object within the given <code>String</code> object, <code>s</code>. The search for the first occurrence of <code>search</code> begins with the first character position in <code>s</code>, unless the optional argument, <code>start</code>, is specified (non-null). If <code>start</code> is specified, the search begins with the character position indicated by the value of <code>start</code>, where the first character position in <code>s</code> is indicated by the value 1. If <code>search</code> is not found within <code>s</code>, the value 0 is returned.


PUBLIC.org.hsqldb.Library.log10              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.log10(double)

                                                               [remarks]
  Returns the base 10 logarithm of the given <code>double</code> value.


PUBLIC.org.hsqldb.Library.ltrim              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.ltrim(java.lang.String)

                                                               [remarks]
  Returns the characters of the given <code>String</code>, with the leading spaces removed. Characters such as TAB are not removed.


PUBLIC.org.hsqldb.Library.minute             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.minute(java.sql.Time)

                                                               [remarks]
  Returns the minute from the given time value, as integer value in the range of 0-59.


PUBLIC.org.hsqldb.Library.mod                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p2                               INTEGER, in                 
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.mod(int,int)

                                                               [remarks]
  Returns the remainder (modulus) of the first given integer divided by the second. <p>


PUBLIC.org.hsqldb.Library.month              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.month(java.sql.Date)

                                                               [remarks]
  Returns the month from the given date value, as an integer value in the range of 1-12 or 0-11. <p> If the sql_month database property is set <code>true</code>, then the range is 1-12, else 0-11


PUBLIC.org.hsqldb.Library.monthname          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.monthname(java.sql.Date)

                                                               [remarks]
  Returns a character string containing the name of month (January, February, March, April, May, June, July, August, September, October, November, December) for the month portion of the given date value.


PUBLIC.org.hsqldb.Library.now                [procedure, returns result]
------------------------------------------------------------------------
  @p0                               TIMESTAMP, result           

                                                            [definition]
  org.hsqldb.Library.now(java.sql.Connection)


PUBLIC.org.hsqldb.Library.octetLength        [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.octetLength(java.lang.String)

                                                               [remarks]
  Returns the number of bytes in the given <code>String</code>. This includes trailing blanks.


PUBLIC.org.hsqldb.Library.pi                 [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.pi()

                                                               [remarks]
  Returns the constant value, pi.


PUBLIC.org.hsqldb.Library.position           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.position(java.lang.String,java.lang.String)

                                                               [remarks]
  Returns the starting position of the first occurrence of the given <code>search</code> <code>String</code> object within the given <code>String</code> object, <code>s</code>.


PUBLIC.org.hsqldb.Library.quarter            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.quarter(java.sql.Date)

                                                               [remarks]
  Returns the quarter of the year in the given date value, as an integer value in the range of 1-4.


PUBLIC.org.hsqldb.Library.rand               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.rand(java.lang.Integer)

                                                               [remarks]
  Returns the next pseudorandom, uniformly distributed <CODE>double</CODE> value between 0.0 and 1.0 from a single, system-wide random number generator's sequence, optionally re-seeding (and thus resetting) the generator sequence. If the seed value is <CODE>null</CODE>, then the underlying random number generator retrieves the next value in its current sequence, else the seed alters the state of the generator object so as to be in exactly the same state as if it had just been created with the seed value.


PUBLIC.org.hsqldb.Library.rawToHex           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.rawToHex(java.lang.String)

                                                               [remarks]
  Converts a raw binary value, as represented by the given <code>String</code>, to the equivalent <code>String</code> of hexidecimal digit characters. <p> This conversion has the effect of expanding the character count 1:4.


PUBLIC.org.hsqldb.Library.repeat             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.repeat(java.lang.String,java.lang.Integer)

                                                               [remarks]
  Returns a <code>String</code> composed of the given <code>String</code>, repeated <code>count</code> times.


PUBLIC.org.hsqldb.Library.replace            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p3                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.replace(java.lang.String,java.lang.String,java.lang.String)

                                                               [remarks]
  Replaces all occurrences of <code>replace</code> in <code>s</code> with the <code>String</code> object: <code>with</code>


PUBLIC.org.hsqldb.Library.right              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.right(java.lang.String,int)

                                                               [remarks]
  Returns the rightmost <code>count</code> characters of the given <code>String</code>, <code>s</code>. <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI> if <code>s</code> is <CODE>null</CODE>, <CODE>null</CODE> is returned <LI> if <code>count</code> is less than one, a zero-length <code>String</code> is returned <LI> if <code>count</code> is greater than the length of <code>s</code>, a copy of <code>s</code> is returned </UL>


PUBLIC.org.hsqldb.Library.round              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               INTEGER, in                 
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.round(double,int)

                                                               [remarks]
  Returns the given <code>double</code> value, rounded to the given <code>int</code> places right of the decimal point. If the supplied rounding place value is negative, rounding is performed to the left of the decimal point, using its magnitude (absolute value).


PUBLIC.org.hsqldb.Library.roundMagic         [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.roundMagic(double)

                                                               [remarks]
  Retrieves a <em>magically</em> rounded </code>double</code> value produced from the given <code>double</code> value. This method provides special handling for numbers close to zero and performs rounding only for numbers within a specific range, returning precisely the given value if it does not lie in this range. <p> Special handling includes: <p> <UL> <LI> input in the interval -0.0000000000001..0.0000000000001 returns 0.0 <LI> input outside the interval -1000000000000..1000000000000 returns input unchanged <LI> input is converted to String form <LI> input with a <CODE>String</CODE> form length greater than 16 returns input unchaged <LI> <CODE>String</CODE> form with last four characters of '...000x' where x != '.' is converted to '...0000' <LI> <CODE>String</CODE> form with last four characters of '...9999' is converted to '...999999' <LI> the <CODE>java.lang.Double.doubleValue</CODE> of the <CODE>String</CODE> form is returned </UL>


PUBLIC.org.hsqldb.Library.rtrim              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.rtrim(java.lang.String)

                                                               [remarks]
  Returns the characters of the given <code>String</code>, with trailing spaces removed.


PUBLIC.org.hsqldb.Library.second             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.second(java.sql.Time)

                                                               [remarks]
  Returns the second of the given time value, as an integer value in the range of 0-59.


PUBLIC.org.hsqldb.Library.sign               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.sign(double)

                                                               [remarks]
  Returns an indicator of the sign of the given <code>double</code> value. If the value is less than zero, -1 is returned. If the value equals zero, 0 is returned. If the value is greater than zero, 1 is returned.


PUBLIC.org.hsqldb.Library.soundex            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.soundex(java.lang.String)

                                                               [remarks]
  Returns a four character code representing the sound of the given <code>String</code>. Non-ASCCI characters in the input <code>String</code> are ignored. <p> This method was rewritten for HSQLDB by fredt@users to comply with the description at <a href="http://www.nara.gov/genealogy/coding.html"> http://www.nara.gov/genealogy/coding.html</a>.<p>


PUBLIC.org.hsqldb.Library.space              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.space(int)

                                                               [remarks]
  Returns a <code>String</code> consisting of <code>count</code> spaces, or <code>null</code> if <code>count</code> is less than zero. <p>


PUBLIC.org.hsqldb.Library.substring          [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p3                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.substring(java.lang.String,int,java.lang.Integer)

                                                               [remarks]
  Returns the characters from the given <code>String</code>, staring at the indicated one-based <code>start</code> position and extending the (optional) indicated <code>length</code>. If <code>length</code> is not specified (is <code>null</code>), the remainder of <code>s</code> is implied.


PUBLIC.org.hsqldb.Library.to_char            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p2                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.to_char(java.util.Date,java.lang.String)


PUBLIC.org.hsqldb.Library.trim               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p3                               BOOLEAN, in                 
  @p4                               BOOLEAN, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.trim(java.lang.String,java.lang.String,boolean,boolean)

                                                               [remarks]
  Retrieves a character sequence derived from <code>s</code> with the leading, trailing or both leading and trailing occurances of <code>trimstr</code> removed


PUBLIC.org.hsqldb.Library.truncate           [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               INTEGER, in                 
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.truncate(double,int)

                                                               [remarks]
  Returns the given <code>double</code> value, truncated to the given <code>int</code> places right of the decimal point. If the given place value is negative, the given <code>double</code> value is truncated to the left of the decimal point, using the magnitude (aboslute value) of the place value.


PUBLIC.org.hsqldb.Library.ucase              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.ucase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all lower case characters converted to upper case using the default Java method.


PUBLIC.org.hsqldb.Library.user               [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.user(java.sql.Connection)

                                                               [remarks]
  Returns the user's authorization name (the user's name as known to this database).


PUBLIC.org.hsqldb.Library.week               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.week(java.sql.Date)

                                                               [remarks]
  Returns the week of the year from the given date value, as an integer value in the range of 1-53.


PUBLIC.org.hsqldb.Library.year               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.year(java.sql.Date)

                                                               [remarks]
  Returns the year from the given date value, as an integer value in the range of 1-9999.


PUBLIC.PI                                    [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.pi()

                                                               [remarks]
  Returns the constant value, pi.


PUBLIC.POWER                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.pow(double,double)

                                                               [remarks]
  Returns of value of the first argument raised to the power of the second argument. Special cases: <ul><li>If the second argument is positive or negative zero, then the result is 1.0. <li>If the second argument is 1.0, then the result is the same as the first argument. <li>If the second argument is NaN, then the result is NaN. <li>If the first argument is NaN and the second argument is nonzero, then the result is NaN. <li>If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. <li>If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. <li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. <li>If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. <li>If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. <li>If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. <li>If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. <li>If the first argument is less than zero and the second argument is a finite even integer, then the result is equal to the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is less than zero and the second argument is a finite odd integer, then the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is finite and less than zero and the second argument is finite and not an integer, then the result is NaN. <li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value.</ul> <p>(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is a fixed point of the method {@link #ceil <tt>ceil</tt>} or, equivalently, a fixed point of the method {@link #floor <tt>floor</tt>}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.) <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.QUARTER                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.quarter(java.sql.Date)

                                                               [remarks]
  Returns the quarter of the year in the given date value, as an integer value in the range of 1-4.


PUBLIC.RADIANS                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.toRadians(double)

                                                               [remarks]
  Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.


PUBLIC.RAND                                  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.random()

                                                               [remarks]
  Returns a <code>double</code> value with a positive sign, greater than or equal to <code>0.0</code> and less than <code>1.0</code>. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. <p> When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression <blockquote><pre>new java.util.Random</pre></blockquote> This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. <p> This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.


PUBLIC.RAWTOHEX                              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.rawToHex(java.lang.String)

                                                               [remarks]
  Converts a raw binary value, as represented by the given <code>String</code>, to the equivalent <code>String</code> of hexidecimal digit characters. <p> This conversion has the effect of expanding the character count 1:4.


PUBLIC.REPEAT                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.repeat(java.lang.String,java.lang.Integer)

                                                               [remarks]
  Returns a <code>String</code> composed of the given <code>String</code>, repeated <code>count</code> times.


PUBLIC.REPLACE                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               LONGVARCHAR, in             
  @p3                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.replace(java.lang.String,java.lang.String,java.lang.String)

                                                               [remarks]
  Replaces all occurrences of <code>replace</code> in <code>s</code> with the <code>String</code> object: <code>with</code>


PUBLIC.RIGHT                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.right(java.lang.String,int)

                                                               [remarks]
  Returns the rightmost <code>count</code> characters of the given <code>String</code>, <code>s</code>. <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI> if <code>s</code> is <CODE>null</CODE>, <CODE>null</CODE> is returned <LI> if <code>count</code> is less than one, a zero-length <code>String</code> is returned <LI> if <code>count</code> is greater than the length of <code>s</code>, a copy of <code>s</code> is returned </UL>


PUBLIC.ROUND                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               INTEGER, in                 
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.round(double,int)

                                                               [remarks]
  Returns the given <code>double</code> value, rounded to the given <code>int</code> places right of the decimal point. If the supplied rounding place value is negative, rounding is performed to the left of the decimal point, using its magnitude (absolute value).


PUBLIC.ROUNDMAGIC                            [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.roundMagic(double)

                                                               [remarks]
  Retrieves a <em>magically</em> rounded </code>double</code> value produced from the given <code>double</code> value. This method provides special handling for numbers close to zero and performs rounding only for numbers within a specific range, returning precisely the given value if it does not lie in this range. <p> Special handling includes: <p> <UL> <LI> input in the interval -0.0000000000001..0.0000000000001 returns 0.0 <LI> input outside the interval -1000000000000..1000000000000 returns input unchanged <LI> input is converted to String form <LI> input with a <CODE>String</CODE> form length greater than 16 returns input unchaged <LI> <CODE>String</CODE> form with last four characters of '...000x' where x != '.' is converted to '...0000' <LI> <CODE>String</CODE> form with last four characters of '...9999' is converted to '...999999' <LI> the <CODE>java.lang.Double.doubleValue</CODE> of the <CODE>String</CODE> form is returned </UL>


PUBLIC.RTRIM                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.rtrim(java.lang.String)

                                                               [remarks]
  Returns the characters of the given <code>String</code>, with trailing spaces removed.


PUBLIC.SECOND                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               TIME, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.second(java.sql.Time)

                                                               [remarks]
  Returns the second of the given time value, as an integer value in the range of 0-59.


PUBLIC.SIGN                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.sign(double)

                                                               [remarks]
  Returns an indicator of the sign of the given <code>double</code> value. If the value is less than zero, -1 is returned. If the value equals zero, 0 is returned. If the value is greater than zero, 1 is returned.


PUBLIC.SIN                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.sin(double)

                                                               [remarks]
  Returns the trigonometric sine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.SOUNDEX                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.soundex(java.lang.String)

                                                               [remarks]
  Returns a four character code representing the sound of the given <code>String</code>. Non-ASCCI characters in the input <code>String</code> are ignored. <p> This method was rewritten for HSQLDB by fredt@users to comply with the description at <a href="http://www.nara.gov/genealogy/coding.html"> http://www.nara.gov/genealogy/coding.html</a>.<p>


PUBLIC.SPACE                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.space(int)

                                                               [remarks]
  Returns a <code>String</code> consisting of <code>count</code> spaces, or <code>null</code> if <code>count</code> is less than zero. <p>


PUBLIC.SQRT                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.sqrt(double)

                                                               [remarks]
  Returns the correctly rounded positive square root of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is the same as the argument.</ul> Otherwise, the result is the <code>double</code> value closest to the true mathematical square root of the argument value.


PUBLIC.SUBSTR                                [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p3                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.substring(java.lang.String,int,java.lang.Integer)

                                                               [remarks]
  Returns the characters from the given <code>String</code>, staring at the indicated one-based <code>start</code> position and extending the (optional) indicated <code>length</code>. If <code>length</code> is not specified (is <code>null</code>), the remainder of <code>s</code> is implied.


PUBLIC.SUBSTRING                             [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p2                               INTEGER, in                 
  @p3                               INTEGER, in                 
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.substring(java.lang.String,int,java.lang.Integer)

                                                               [remarks]
  Returns the characters from the given <code>String</code>, staring at the indicated one-based <code>start</code> position and extending the (optional) indicated <code>length</code>. If <code>length</code> is not specified (is <code>null</code>), the remainder of <code>s</code> is implied.


PUBLIC.TAN                                   [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  java.lang.Math.tan(double)

                                                               [remarks]
  Returns the trigonometric tangent of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.


PUBLIC.TO_CHAR                               [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p2                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.to_char(java.util.Date,java.lang.String)


PUBLIC.TRUNCATE                              [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DOUBLE(8, 17), in           
  @p2                               INTEGER, in                 
  @p0                               DOUBLE(8, 17), result       

                                                            [definition]
  org.hsqldb.Library.truncate(double,int)

                                                               [remarks]
  Returns the given <code>double</code> value, truncated to the given <code>int</code> places right of the decimal point. If the given place value is negative, the given <code>double</code> value is truncated to the left of the decimal point, using the magnitude (aboslute value) of the place value.


PUBLIC.UCASE                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.ucase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all lower case characters converted to upper case using the default Java method.


PUBLIC.UPPER                                 [procedure, returns result]
------------------------------------------------------------------------
  @p1                               LONGVARCHAR, in             
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.ucase(java.lang.String)

                                                               [remarks]
  Returns a copy of the given <code>String</code>, with all lower case characters converted to upper case using the default Java method.


PUBLIC.USER                                  [procedure, returns result]
------------------------------------------------------------------------
  @p0                               LONGVARCHAR, result         

                                                            [definition]
  org.hsqldb.Library.user(java.sql.Connection)

                                                               [remarks]
  Returns the user's authorization name (the user's name as known to this database).


PUBLIC.WEEK                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.week(java.sql.Date)

                                                               [remarks]
  Returns the week of the year from the given date value, as an integer value in the range of 1-53.


PUBLIC.YEAR                                  [procedure, returns result]
------------------------------------------------------------------------
  @p1                               DATE, in                    
  @p0                               INTEGER, result             

                                                            [definition]
  org.hsqldb.Library.year(java.sql.Date)

                                                               [remarks]
  Returns the year from the given date value, as an integer value in the range of 1-9999.



