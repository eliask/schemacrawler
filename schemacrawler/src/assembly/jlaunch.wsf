<job id="jlaunch">
  <!--
  /*
   *
   * SchemaCrawler
   * http://sourceforge.net/projects/schemacrawler
   * Copyright (c) 2000-2012, Sualeh Fatehi.
   *
   * This library is free software; you can redistribute it and/or modify it under the terms
   * of the GNU Lesser General Public License as published by the Free Software Foundation;
   * either version 2.1 of the License, or (at your option) any later version.
   *
   * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
   * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   * See the GNU Lesser General Public License for more details.
   *
   * You should have received a copy of the GNU Lesser General Public License along with this
   * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
   * Boston, MA 02111-1307, USA.
   *
   */
   -->
  <script language="VBScript">
    Function CommandLineArguments()
      For x = 0 To WScript.Arguments.Count - 1
        CommandLineArguments = CommandLineArguments + """" + WScript.Arguments(x) + """ "
      Next
    End Function


    Function LocateJava
      '  Find JRE (in order to find java.exe)
      '  1 In .\jre directory (JRE installed with application)
      '  2 In JAVA_HOME environment variable
      '  3 In the registry
      '  4 Assume java.exe in current directory or PATH
	  
      Set WScriptShell = WScript.CreateObject("WScript.Shell")
      Set FileSystemObject = CreateObject("Scripting.FileSystemObject")

      Dim JavaHome
      Dim FoundJava
      Dim Java

      FoundJava = False
	  
	  If Not FoundJava Then
	    JavaHome = ".\jre"
	    Java = JavaHome + "\bin\java.exe"
		FoundJava  = FileSystemObject.FileExists(Java)
      End If
	  
      If Not FoundJava Then
        Dim JreVersion
        Dim JavaHomeKey
		
		On Error Resume Next			  
        JreVersion = WScriptShell.RegRead("HKLM\SOFTWARE\JavaSoft\Java Runtime Environment\CurrentVersion")
        JavaHomeKey = "HKLM\SOFTWARE\JavaSoft\Java Runtime Environment\" + JreVersion + "\JavaHome"
        JavaHome = WScriptShell.RegRead(JavaHomeKey)		
		On Error GoTo 0
			  
        Java = JavaHome + "\bin\java.exe"
        FoundJava  = FileSystemObject.FileExists(Java)
      End If

      If Not FoundJava Then
        JavaHome = WScriptShell.Environment("User").Item("JAVA_HOME")
        Java = JavaHome + "\bin\java.exe"
        FoundJava  = FileSystemObject.FileExists(Java)
      End If

      If Not FoundJava Then
        JavaHome = ""
        Java = "java"
      End If
	  
      LocateJava = """" & Java & """"

    End Function


    Function CreateLibClasspath(ByVal LibPath)

      Set WScriptShell = WScript.CreateObject("WScript.Shell")
      Set FileSystemObject = CreateObject("Scripting.FileSystemObject")
      Set LibFolder = FileSystemObject.GetFolder(LibPath)
      Set JarFiles = LibFolder.Files

      CreateLibClasspath = ""
      CreateLibClasspath = CreateLibClasspath & WScriptShell.Environment("User").Item("CLASSPATH") + ";"
      For Each JarFile In JarFiles
        If FileSystemObject.GetExtensionName(JarFile) = "jar" Then
          CreateLibClasspath = CreateLibClasspath + FileSystemObject.GetAbsolutePathName(JarFile) + ";"
        End If
      Next

      CreateLibClasspath = """" + CreateLibClasspath + """"

    End Function


    Function ExecuteShellProgram(ByVal CommandLine)
      ' http://www.intelliadmin.com/blog/2007/01/how-to-run-external-program-within-vb.html

      Dim WScriptShell
      Dim SpawnedProcess
      Dim SpawnedProcessStatus

      Set WScriptShell = CreateObject("WScript.Shell")
      Set SpawnedProcess = WScriptShell.Exec(CommandLine)

      'Check to see if we started the process without error
      If ((SpawnedProcess.ProcessID=0) And (SpawnedProcess.Status=1)) Then
        Err.Raise vbObjectError,,"Failed executing process"
      End If

      'Now loop until the process has terminated, and pull out
      'any console output
      Do
        'Get current state of the process
        SpawnedProcessStatus = SpawnedProcess.Status

        'Forward console output from launched process to ours
        WScript.StdOut.Write SpawnedProcess.StdOut.ReadAll()
        WScript.StdErr.Write SpawnedProcess.StdErr.ReadAll()

        'Did the process terminate?
        If (SpawnedProcessStatus <> 0) Then
          Exit Do
        End If
      Loop

      'Return the exit code
      ExecuteShellProgram = SpawnedProcess.ExitCode

    End Function
  </script>
  <script language="VBScript">
    Dim Java
    Java = LocateJava()

    Dim LibClasspath
    LibClasspath = CreateLibClasspath(Replace(WScript.ScriptFullName, WScript.ScriptName, "") & "lib")

    Dim CommandLine
    CommandLine = Java & " -classpath " & LibClasspath & " " & CommandLineArguments()

    ' WScript.Echo CommandLine

    ExecuteShellProgram(CommandLine)
  </script>
</job>